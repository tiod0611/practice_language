library(dplyr)
exam = read.csv("csv_exam.csv")
exam = read.csv("../Data/csv_exam.csv")
exam
exam %>% filter(class == 1)
# 문제 class가 2인 데이터 뽑기
exam %>% filter(class==2)
source("C:/Users/Kyeul/Desktop/code/언어_연습/practice_language/R/DoIt_R_programming/chapter_6/6-2.R", echo=TRUE)
# 여러 조건으로 사용하기
exam %>% filter(class==1 & math >= 50)
exam %>% filter(class==1 | math >=50)
# %in% 기호 사용하기 포함된 데이터를 보여줌
exam %>% filter(class %in% c(1,2))
# 추출한 데이터를 새로운 변수에 저장하자
class1 = exam %>% filter(class==1)
class1
class2 = exam %>% filter(class==2)
class2
mean(class1$math)
mean(class2$math)
# 연습문제
library(ggplot2)
mpg = as.data.frame(mpg)
mpg
#1 배기량이 4인 차와 5인차의 고속도로 연비 평균 확인
displ1 = mpg %>% filter(displ==4)
source("C:/Users/Kyeul/Desktop/code/언어_연습/practice_language/R/DoIt_R_programming/chapter_6/6-2.R", echo=TRUE)
displ2 = mpg %>% filter(displ==5)
mean(displ1$hwy)
mean(displ2$hwy)
#2 자동차 제조사의 연비 확인
mpg$manufacturer
#2 자동차 제조사의 연비 확인
name(mpg$manufacturer)
#2 자동차 제조사의 연비 확인
table(mpg$manufacturer)
audi = mpg %>% filter(manufacturer=="audi")
toyota = mpg %>% filter(manufacturer=="toyota")
mean(audi$cty)
mean(toyota$cty)
mean((mpg %>% filter(manufacturer %in% c("checrolet", "ford", "honda")))$hwy)
#1 배기량이 4인 차와 5인차의 고속도로 연비 평균 확인
displ1 = mpg %>% filter(displ<=4)
displ2 = mpg %>% filter(displ>=5)
mean(displ1$hwy)
mean(displ2$hwy)
mean((mpg %>% filter(manufacturer %in% c("checrolet", "ford", "honda")))$hwy)
three_m = mpg %>% filter(manufacturer %in% c("checrolet", "ford", "honda"))
mean(three_m$hwy)
exam %>% select(math)
exam %>% select(math, english)
exam %>% select(c("math", "english"))
# 변수 제외하기
exam %>% select(-math)
# dplyr과 조합하여 사용하기
exam %>% filter(class==1) %>% select(math)
# dplyr과 조합하여 사용하기
exam %>% filter(class==1) %>%
select(math) %>%
table
# dplyr과 조합하여 사용하기
exam %>% filter(class==1) %>%
select(math) %>%
table %>%
# dplyr과 조합하여 사용하기
exam %>% filter(class==1) %>%
select(math) %>%
table %>%
sum
# dplyr과 조합하여 사용하기
exam %>% filter(class==1) %>%
select(math) %>%
table %>%
mean
exam %>% arrange(math)
# 내림차순
exam %>% arrange(desc(math))
desc(math)
desc(exam$math)
# 그룹으로 하기
exam %>% arrange(matn, english)
# 그룹으로 하기
exam %>% arrange(class, english)
# 연습문제
# audi 자동차 중 hwy 연비가 높은 5개의 데이터를 출력
mpg %>% filter(manufacturer=="audi") %>%
arrange(hwy) %>%
head(5)
# 연습문제
# audi 자동차 중 hwy 연비가 높은 5개의 데이터를 출력
mpg %>% filter(manufacturer=="audi") %>%
arrange(desc(hwy)) %>%
head(5)
exam %>% mutate(total = math+english+science)
# 여러개 만들기
exam %>% mutate(total = math+english+science,
mean = mean(total))
# 여러개 만들기
exam %>% mutate(total = math+english+science,
mean = (math+english+science)/3)
# ifelse 사용하여 특정 값 넣기
exam %>% mutate(test = ifelse(math>70, "pass", "fail"))
# 파생변수를 추가한 후 dplyr 함수 사용
exam %>% mutate(total = math+english+science) %>%
arrange(total)
# 파생변수를 추가한 후 dplyr 함수 사용
exam %>% mutate(total = math+english+science) %>%
arrange(desc(total))
exam = read.csv("../Data/csv_exam.csv")
library(dplyr)
exam %>% summarise(mean_math = mean(math))
# group_by 활용하기
exam %>%
group_by(class) %>%
summarise(mean_math = mean(math))  # class별로 그룹을 묶은 다음에 수학 평균을 내라라
# group_by 활용하기
exam %>%
group_by(class) %>%
summarise(mean_math = mean(math), mean_english = mean(english))  # class별로 그룹을 묶은 다음에 수학 평균을 내라라
# 각종 통계량을 적용할 수도 있다.
exam %>%
group_by(class) %>%
summarise(mean_math = mean(math),
sum_math = sum(math),
median_math = median(math),
num_student = n())
exam %>%
group_by(class) %>%
summarise(n = n())
# 집단의 집단 나누기
mpg %>%
group_by(manufacturer, drv) %>%
summarise(mean_cty = mean(cty)) %>%
head(10)
# 연습문제: 회사별로 "suv" 자동차의 도시 및 고속도로 통합 연비 평균을 구해 내림차순 정렬하고 상위 5개 데이터만 보기
head(mpg)
mpg %>%
group_by(manufacturer) %>%
filter(class == "suv") %>%
summarise(mean_cty=mean(cty), mean_hwy=mean(hwy))
mpg %>%
group_by(manufacturer) %>%
filter(class == "suv") %>%
mutate(total=(cty+hwy)/2) %>% # 새로운 변수 만들기
summarise(mean_total = mean(total)) %>% # total의 전체 평균
arrange(desc(mean_total))
mpg %>%
group_by(manufacturer) %>%
filter(class == "suv") %>%
mutate(total=(cty+hwy)/2) %>% # 새로운 변수 만들기
summarise(mean_total = mean(total)) %>% # total의 전체 평균
arrange(desc(mean_total)) %>%
head()
total
mpg %>%
group_by(class) %>%
summarise(mean_cty=mean(cty))
mpg %>%
group_by(class) %>%
summarise(mean_cty=mean(cty)) %>%
arrane(mean_cty)
mpg %>%
group_by(class) %>%
summarise(mean_cty=mean(cty)) %>%
arrange(mean_cty)
mpg %>%
group_by(class) %>%
summarise(mean_cty=mean(cty)) %>%
arrange(desc(mean_cty))
#3 어떤 "회사"가 고속도로 연비가 높은지 보려고 한다. 가장 높은 3 회사를 알아보자
mpg %>%
group_by(manufacturer) %>%
summarise(mean_hwy=mean(hwy)) %>%
arrange(desc(mean_hwy))
#3 어떤 "회사"가 고속도로 연비가 높은지 보려고 한다. 가장 높은 3 회사를 알아보자
mpg %>%
group_by(manufacturer) %>%
summarise(mean_hwy=mean(hwy)) %>%
arrange(desc(mean_hwy)) %>%
head(3)
mpg %>%
group_by(manufacturer) %>%
filter(class="compact") %>%
summarise(num_compact = n())
mpg %>%
group_by(manufacturer) %>%
filter(class=="compact") %>%
summarise(num_compact = n())
mpg %>%
group_by(manufacturer) %>%
filter(class=="compact") %>%
summarise(num_compact = n()) %>%
arraunge(desc(num_compact)) %>%
head(3)
mpg %>%
group_by(manufacturer) %>%
filter(class=="compact") %>%
summarise(num_compact = n()) %>%
arrauge(desc(num_compact)) %>%
head(3)
mpg %>%
group_by(manufacturer) %>%
filter(class=="compact") %>%
summarise(num_compact = n()) %>%
arrange(desc(num_compact)) %>%
head(3)
mpg %>%
group_by(manufacturer) %>%
filter(class=="compact") %>%
summarise(num_compact = n()) %>%
arrange(desc(num_compact)) %>%
mpg %>%
group_by(manufacturer) %>%
filter(class=="compact") %>%
summarise(num_compact = n()) %>%
arrange(desc(num_compact)) %>%
mpg %>%
group_by(manufacturer) %>%
filter(class=="compact") %>%
summarise(num_compact = n()) %>%
arrange(desc(num_compact))
mpg %>%
group_by(manufacturer) %>%
filter(class=="compact") %>%
summarise(num_compact = n()) %>%
arrange(desc(num_compact))
test1 = data.frame(id = c(1,2,3,4,5),
midterm = c(70,72, 80,60,86))
test2 = data.frame(id = c(1,2,3,4,5),
final = c(90, 90, 70,80,88))
total = left_join(test1, test2, by="id") # id를 기준으로 데이터 합치기
total
total = left_join(test1, test2) # id를 기준으로 데이터 합치기. index가 같아줘야겠지?
total
name = data.frame(class=c(1,2,3,4,5),
teacher=c('kim', 'lee','kim', 'park','choi'))
exam_new = left_join(exam, name, by='class')
exam_new
group_b = data.frame(id=c(6,7,8,9,10),
test=c(89,56,75,85,67))
group_a = data.frame(id=c(1,2,3,4,5),
test=c(60, 40, 60,70,60))
group_all = bind_rows(group_a, group_b)
group_all
bind_rows(group_all, name)
fuel = data.frame(f1 = c("c", "d","e","p","r")
price_f1=c(2.35, 2.38, 2.11, 2.76, 2.22),
fuel = data.frame(f1 = c("c", "d","e","p","r"),
price_f1=c(2.35, 2.38, 2.11, 2.76, 2.22),
stringsAsFactors=F)
fuel
# 1 mpg의 연료 종류를 나타내는 f1 변수에는 가격이 없음 가격 변수를 추가해보자.
mpg
# 1 mpg의 연료 종류를 나타내는 f1 변수에는 가격이 없음 가격 변수를 추가해보자.
head(mpg)
mpg_new = left_join(mpg, fuel, by="f1")
fuel = data.frame(fl = c("c", "d","e","p","r"),
price_f1=c(2.35, 2.38, 2.11, 2.76, 2.22),
stringsAsFactors=F)
fuel
mpg_new = left_join(mpg, fuel, by="fl")
mpg_new
fuel = data.frame(fl = c("c", "d","e","p","r"),
price_fl=c(2.35, 2.38, 2.11, 2.76, 2.22),
stringsAsFactors=F)
fuel
# 1 mpg의 연료 종류를 나타내는 f1 변수에는 가격이 없음 가격 변수를 추가해보자.
head(mpg)
mpg_new = left_join(mpg, fuel, by="fl")
# 2 변수가 잘 추가되었나 확인을 위해 "model", "fl", "price_fl"을 select를 활용해 앞의 5행을 출력해보자
select(model)
# 2 변수가 잘 추가되었나 확인을 위해 "model", "fl", "price_fl"을 select를 활용해 앞의 5행을 출력해보자
select(mpg %in% model)
# 2 변수가 잘 추가되었나 확인을 위해 "model", "fl", "price_fl"을 select를 활용해 앞의 5행을 출력해보자
mpg %>%
select(model, fl, price_fl) %>%
head(5)
head(mpg_new)
# 2 변수가 잘 추가되었나 확인을 위해 "model", "fl", "price_fl"을 select를 활용해 앞의 5행을 출력해보자
mpg_new %>%
select(model, fl, price_fl) %>%
head(5)
